/*
 *  This file is part of Personal Bug Tracker.
 *  Copyright (C) 2009, Xavier Nayrac
 *
 *  Personal Bug Tracker is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package desktopbugtracker.dialog;

import desktopbugtracker.MainUI;
import desktopbugtracker.data.*;
import desktopbugtracker.component.*;
import desktopbugtracker.dao.AttachmentDAO;
import desktopbugtracker.dao.MessageDAO;
import desktopbugtracker.tools.RawFile;
import desktopbugtracker.util.MouseUtility;
import java.awt.*;
import java.io.*;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 * @author xavier
 */
public class DialogAttachment extends javax.swing.JDialog {

    private int messageId;
    private DefaultListModel dlm;

    public DialogAttachment(Frame parent, boolean modal, int messageId) {
        super(parent, modal);
        init(messageId);
        showMe(parent);
    }

    private void init(int messageId) {
        initVar(messageId);
        initComponents();
        fillAttachment();
    }

    private void initVar(int messageId) {
        this.messageId = messageId;
        dlm = new DefaultListModel();
    }

    private void showMe(Frame parent) {
        this.getRootPane().setDefaultButton(okButton);
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    private void fillAttachment() {
        dlm.removeAllElements();
        for (Attachment e : new Attachment().readFromMessage(messageId)) {
            dlm.addElement(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        btAttach = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("desktopbugtracker/Bundle", ApplicationConfig.getLocale()); // NOI18N
        okButton.setText(bundle.getString("Close")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18));
        jLabel1.setText(bundle.getString("Attachment")); // NOI18N

        jList1.setModel(dlm);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        btAttach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/desktopbugtracker/img/toolbar/attach.png"))); // NOI18N
        btAttach.setToolTipText(bundle.getString("Attach_file")); // NOI18N
        btAttach.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btAttach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAttachActionPerformed(evt);
            }
        });

        btRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/desktopbugtracker/img/toolbar/edit_remove.png"))); // NOI18N
        btRemove.setToolTipText(bundle.getString("Delete_this_file")); // NOI18N
        btRemove.setEnabled(false);
        btRemove.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAttach, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(okButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btAttach)
                    .addComponent(btRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose();
    }//GEN-LAST:event_okButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose();
    }//GEN-LAST:event_closeDialog

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if(dlm.size() > 0) {
            btRemove.setEnabled(true);
        } else {
            btRemove.setEnabled(false);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void btAttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAttachActionPerformed
        File source = chooseFile();
        // Un truc m'échappe : si je combine les 2 tests suivants cela donne NullPointerException (la fatigue ?)
        if(source == null) return;
        if(source.exists() == false) return;
        Integer attachmentId = createAttachmentInDatabase(source.getName(), messageId);
        copyAttachmentFile(source, attachmentId);
        fillAttachment();
    }//GEN-LAST:event_btAttachActionPerformed

    private File chooseFile() {
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile();
        } else {
            return null;
        }
    }

    /**
     * If returned value is 0, there was a problem.
     * @param name
     * @param messageId
     * @return the attachment id
     */
    private Integer createAttachmentInDatabase(String name, int messageId) {
        Attachment a = new Attachment(name, messageId);
        return a.save();
    }

    private void copyAttachmentFile(File source, Integer attachmentId) {
        try {
            RawFile rf = new RawFile(source.getAbsolutePath());
            String dest = ApplicationDirectory.attachmentDirectory() + attachmentId + source.getName();
            if(!rf.copyTo(dest)) {
                JOptionPane.showMessageDialog(this, "Cannot copy file " + source.getAbsolutePath() + " to " + dest);
                undoAttachment(attachmentId);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DialogAttachment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void undoAttachment(Integer attachmentId) {
        try {
            AttachmentDAO.deletePk(attachmentId);
        } catch (SQLException ex) {
            Logger.getLogger(DialogAttachment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        if (!reallyDelete()) {
            return;
        }
        deleteAttachment((Attachment) jList1.getSelectedValue());
        fillAttachment();
    }//GEN-LAST:event_btRemoveActionPerformed

    private void deleteAttachment(Attachment a) {
        deleteFile(a);
        deleteAttachmentFromDatabase(a);
    }

    private void deleteFile(Attachment a) {
        File file = new File(a.getAbsolutePath());
        if (file.delete() == false) {
            JOptionPane.showMessageDialog(this, "Cannot delete file " + file.getAbsolutePath() + ". Try to manually remove it.");
            //@todo a log file with this kind of problems.
        }
    }

    private void deleteAttachmentFromDatabase(Attachment a) {
        if(a.delete() == false) {
            //@todo a log file with this kind of problems.
        }
    }

    private boolean reallyDelete() {
        String msg = ResourceBundle.getBundle("desktopbugtracker/Bundle", ApplicationConfig.getLocale()).getString("Really_delete_this_file");
        Icon icon = new ImageIcon(getClass().getResource("/desktopbugtracker/img/warning64.png"));
        int response = JOptionPane.showConfirmDialog(this, msg, "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE, icon);
        if (response == JOptionPane.YES_OPTION) {
            return true;
        } else {
            return false;
        }
    }

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (MouseUtility.isDoubleClic(evt) == false) {
            return;
        }
        Attachment a = (Attachment) jList1.getSelectedValue();
        if (a == null) {
            return;
        }
        openAttachmentFile(a);
    }//GEN-LAST:event_jList1MouseClicked

    private void openAttachmentFile(Attachment a) {
        try {
            Desktop.getDesktop().open(new File(a.getAbsolutePath()));
        } catch (IOException ex) {
            Logger.getLogger(DialogAttachment.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void doClose() {
        try {
            Message m = MessageDAO.readPk(messageId);
            ((MainUI)getParent()).constructAndShowMessages(m.bug_id);
        } catch (SQLException ex) {
            Logger.getLogger(DialogAttachment.class.getName()).log(Level.SEVERE, null, ex);
        }
        ((MainUI)getParent()).labelAttachmentMouseExited();
        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAttach;
    private javax.swing.JButton btRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
